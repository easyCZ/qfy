// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/synthetics.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyntheticsServiceClient is the client API for SyntheticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyntheticsServiceClient interface {
	ListSynthetics(ctx context.Context, in *ListSyntheticsRequest, opts ...grpc.CallOption) (SyntheticsService_ListSyntheticsClient, error)
}

type syntheticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyntheticsServiceClient(cc grpc.ClientConnInterface) SyntheticsServiceClient {
	return &syntheticsServiceClient{cc}
}

func (c *syntheticsServiceClient) ListSynthetics(ctx context.Context, in *ListSyntheticsRequest, opts ...grpc.CallOption) (SyntheticsService_ListSyntheticsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SyntheticsService_ServiceDesc.Streams[0], "/synthetics.v1.SyntheticsService/ListSynthetics", opts...)
	if err != nil {
		return nil, err
	}
	x := &syntheticsServiceListSyntheticsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SyntheticsService_ListSyntheticsClient interface {
	Recv() (*Synthetic, error)
	grpc.ClientStream
}

type syntheticsServiceListSyntheticsClient struct {
	grpc.ClientStream
}

func (x *syntheticsServiceListSyntheticsClient) Recv() (*Synthetic, error) {
	m := new(Synthetic)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SyntheticsServiceServer is the server API for SyntheticsService service.
// All implementations should embed UnimplementedSyntheticsServiceServer
// for forward compatibility
type SyntheticsServiceServer interface {
	ListSynthetics(*ListSyntheticsRequest, SyntheticsService_ListSyntheticsServer) error
}

// UnimplementedSyntheticsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSyntheticsServiceServer struct {
}

func (UnimplementedSyntheticsServiceServer) ListSynthetics(*ListSyntheticsRequest, SyntheticsService_ListSyntheticsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSynthetics not implemented")
}

// UnsafeSyntheticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyntheticsServiceServer will
// result in compilation errors.
type UnsafeSyntheticsServiceServer interface {
	mustEmbedUnimplementedSyntheticsServiceServer()
}

func RegisterSyntheticsServiceServer(s grpc.ServiceRegistrar, srv SyntheticsServiceServer) {
	s.RegisterService(&SyntheticsService_ServiceDesc, srv)
}

func _SyntheticsService_ListSynthetics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSyntheticsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyntheticsServiceServer).ListSynthetics(m, &syntheticsServiceListSyntheticsServer{stream})
}

type SyntheticsService_ListSyntheticsServer interface {
	Send(*Synthetic) error
	grpc.ServerStream
}

type syntheticsServiceListSyntheticsServer struct {
	grpc.ServerStream
}

func (x *syntheticsServiceListSyntheticsServer) Send(m *Synthetic) error {
	return x.ServerStream.SendMsg(m)
}

// SyntheticsService_ServiceDesc is the grpc.ServiceDesc for SyntheticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyntheticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "synthetics.v1.SyntheticsService",
	HandlerType: (*SyntheticsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListSynthetics",
			Handler:       _SyntheticsService_ListSynthetics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/synthetics.proto",
}
